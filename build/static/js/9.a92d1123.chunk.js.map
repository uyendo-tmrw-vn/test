{"version":3,"sources":["pages/HomePage/Popup/index.tsx"],"names":["HeroArenaPopup","useState","setDiffTime","setCountDownTime","setShowPlayBtn","popupData","useSelector","state","cmsSlice","cmsLoading","cmsData","useEffect","countDown","setInterval","diffTimes","moment","utc","clearInterval","day","hour","minute","second","duration","result","days","hours","minutes","seconds","dispatch","useDispatch","sessionStorage","setPopup","popupOpen","counter","visible","onCancel","cancelButtonProps","className","onOk","okButtonProps","closeIcon","footer","dots","infinite","arrows","speed","autoplay","autoplaySpeed","slidesToShow","slidesToScroll","data","attributes","popups","map","item","index","href","url","target","rel","src","image","style","width","alt"],"mappings":"mQAUe,SAASA,IAAkB,IAAD,MACvC,EAAgCC,qBAAhC,mBAAiBC,GAAjB,WACA,EAA0CD,mBAAc,MAAxD,mBAAsBE,GAAtB,WACA,EAAsCF,oBAAc,GAApD,mBAAoBG,GAApB,WAGMC,GAFaC,aAAY,SAACC,GAAD,OAAWA,EAAMC,SAASC,UAA1B,IAEbH,aAAY,SAACC,GAAD,OAAWA,EAAMC,SAASE,OAA1B,KAa9BC,qBAAU,WACR,IAAMC,EAAYC,aAAY,WAG5B,IAEMC,EAFYC,IAAOC,IAAI,uBACZD,IAAOC,MAIxB,GADAd,EAAYY,GACRA,GAAa,EACfG,cAAcL,GACdR,GAAe,GACfD,EAAiB,CACfe,IAAK,IACLC,KAAM,IACNC,OAAQ,IACRC,OAAQ,UAEL,CACL,IAAMC,EAAgBP,IAAOO,SAASR,EAAW,gBAC3CS,EAASR,IAAOO,SAASA,EAAW,IAAM,gBAChDnB,EAAiB,CACfe,IAAKK,EAAOC,OACZL,KAAMI,EAAOE,QACbL,OAAQG,EAAOG,UACfL,OAAQE,EAAOI,WAElB,CACF,GAAE,IACJ,GAAE,IAEH,IAAMC,EAAWC,cACjBlB,qBAAU,WACMmB,eAAe,gBAE3BF,EAASG,aAAS,IAClBD,eAAe,eAAgB,EAKlC,GAAE,CAACF,IACJ,IAAMI,EAAY1B,aAAY,SAACC,GAAD,OAAWA,EAAM0B,QAAQD,SAAzB,IAE9B,OAEE,aADA,CACA,gBACE,cAAC,IAAD,CAEEE,QAASF,EACTG,SAAU,WACRP,EAASG,aAAS,IAClBD,eAAe,eAAgB,CAChC,EACDM,kBAAmB,CACjBC,UAAW,uBAEbC,KAAM,WAAS,EACfC,cAAe,CACbF,UAAW,0BAEbG,UAAW,kBAAM,4BAAN,EACXC,OAAQ,KACRJ,UAAU,uBAhBZ,SAkBE,qBAAKA,UAAU,kBAAf,SAcE,cAAC,IAAD,2BA1Fc,CACpBK,MAAM,EACNC,UAAU,EACVC,QAAQ,EACRC,MAAO,IACPC,UAAU,EACVC,cAAe,KACfC,aAAc,EACdC,eAAgB,IAkFV,oBAEG5C,QAFH,IAEGA,GAFH,UAEGA,EAAW6C,YAFd,iBAEG,EAAiBC,kBAFpB,iBAEG,EAA6BC,cAFhC,aAEG,EAAqCC,KAAI,SAACC,EAAMC,GAAP,iBACxC,mBACEC,KAAMF,EAAKG,IACXC,OAAO,SACPC,IAAI,aAHN,SAME,qBACEC,IAAG,0CAA8BN,QAA9B,IAA8BA,GAA9B,UAA8BA,EAAMO,aAApC,iBAA8B,EAAaX,YAA3C,iBAA8B,EAAmBC,kBAAjD,aAA8B,EAA+BM,KAChEK,MAAO,CAAEC,MAAO,QAChBC,IAAI,WALDT,EALiC,YAuDrD,C","file":"static/js/9.a92d1123.chunk.js","sourcesContent":["import React, { useEffect, useState } from \"react\";\r\nimport { setPopup } from \"redux/slices/counter\";\r\nimport { Modal } from \"antd\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport moment from \"moment\";\r\n\r\nimport Slider from \"react-slick\";\r\nimport \"slick-carousel/slick/slick.css\";\r\nimport \"slick-carousel/slick/slick-theme.css\";\r\n\r\nexport default function HeroArenaPopup() {\r\n  const [diffTime, setDiffTime] = useState<any>();\r\n  const [countDownTime, setCountDownTime] = useState<any>(null);\r\n  const [showPlayBtn, setShowPlayBtn] = useState<any>(false);\r\n  const cmsLoading = useSelector((state) => state.cmsSlice.cmsLoading);\r\n\r\n  const popupData = useSelector((state) => state.cmsSlice.cmsData);\r\n\r\n  var carouselSetting = {\r\n    dots: true,\r\n    infinite: true,\r\n    arrows: false,\r\n    speed: 1000,\r\n    autoplay: true,\r\n    autoplaySpeed: 2500,\r\n    slidesToShow: 1,\r\n    slidesToScroll: 1,\r\n  };\r\n\r\n  useEffect(() => {\r\n    const countDown = setInterval(() => {\r\n      // const then: any = new Date(\"2021-12-04T21:00:00\");\r\n      // const now: any = new Date();\r\n      const then: any = moment.utc(\"2021-12-04T15:15:00\");\r\n      const now: any = moment.utc();\r\n      const diffTimes = then - now;\r\n\r\n      setDiffTime(diffTimes);\r\n      if (diffTimes <= 0) {\r\n        clearInterval(countDown);\r\n        setShowPlayBtn(true);\r\n        setCountDownTime({\r\n          day: \"0\",\r\n          hour: \"0\",\r\n          minute: \"0\",\r\n          second: \"0\",\r\n        });\r\n      } else {\r\n        const duration: any = moment.duration(diffTimes, \"milliseconds\");\r\n        const result = moment.duration(duration - 1000, \"milliseconds\");\r\n        setCountDownTime({\r\n          day: result.days(),\r\n          hour: result.hours(),\r\n          minute: result.minutes(),\r\n          second: result.seconds(),\r\n        });\r\n      }\r\n    }, 1000);\r\n  }, []);\r\n\r\n  const dispatch = useDispatch();\r\n  useEffect(() => {\r\n    let entered = sessionStorage[\"popup-flag\"];\r\n    if (!entered) {\r\n      dispatch(setPopup(true));\r\n      sessionStorage[\"popup-flag\"] = true;\r\n    } else {\r\n      // dispatch(setPopup(false));\r\n      // sessionStorage[\"popup-flag\"] = false;\r\n    }\r\n  }, [dispatch]);\r\n  const popupOpen = useSelector((state) => state.counter.popupOpen);\r\n\r\n  return (\r\n    // popupOpen\r\n    <div>\r\n      <Modal\r\n        // visible={true}\r\n        visible={popupOpen}\r\n        onCancel={() => {\r\n          dispatch(setPopup(false));\r\n          sessionStorage[\"popup-flag\"] = false;\r\n        }}\r\n        cancelButtonProps={{\r\n          className: \"modal-button-cancel\",\r\n        }}\r\n        onOk={() => { }}\r\n        okButtonProps={{\r\n          className: \"detail-modal-button-ok\",\r\n        }}\r\n        closeIcon={() => <></>}\r\n        footer={null}\r\n        className=\"popup-launching-wrap\"\r\n      >\r\n        <div className=\"popup-launching\">\r\n          {/* <a\r\n            href={popupData?.data?.attributes?.popup?.url}\r\n            target=\"_blank\"\r\n            rel=\"noreferrer\"\r\n          >\r\n            <img\r\n              src={`https://cms.heroarena.app${popupData?.data?.attributes?.popup?.image?.data?.attributes?.url}`}\r\n              style={{ width: \"100%\" }}\r\n              alt=\"popup\"\r\n            />\r\n          </a> */}\r\n\r\n\r\n          <Slider {...carouselSetting}>\r\n\r\n            {popupData?.data?.attributes?.popups?.map((item, index) => (\r\n              <a\r\n                href={item.url}\r\n                target=\"_blank\"\r\n                rel=\"noreferrer\"\r\n                key={index}\r\n              >\r\n                <img\r\n                  src={`https://cms.heroarena.app${item?.image?.data?.attributes?.url}`}\r\n                  style={{ width: \"100%\" }}\r\n                  alt=\"popup\"\r\n                />\r\n              </a>\r\n            ))\r\n            }\r\n          </Slider>\r\n\r\n\r\n          {/* <div className=\"popup-launching--overlay\">\r\n            <div className=\"clock-arena\">\r\n              <div className=\"clock\">{countDownTime?.day}</div>\r\n              <div className=\"clock\">{countDownTime?.hour}</div>\r\n              <div className=\"clock\">{countDownTime?.minute}</div>\r\n              <div className=\"clock\">{countDownTime?.second}</div>\r\n            </div>\r\n            <div className=\"button-arena\">\r\n              {showPlayBtn ? (\r\n                <a\r\n                  className=\"button-popup\"\r\n                  href=\"https://play.heroarena.app\"\r\n                  target=\"_blank\"\r\n                ></a>\r\n              ) : (\r\n                <a\r\n                  className=\"button-popup\"\r\n                  href=\"https://blog.heroarena.app/news/official-game-release-of-hero-arena/\"\r\n                  target=\"_blank\"\r\n                ></a>\r\n              )}\r\n              <a\r\n                className=\"button-popup\"\r\n                href=\"https://nft.heroarena.app/\"\r\n                target=\"_blank\"\r\n              ></a>\r\n              <a\r\n                className=\"button-popup\"\r\n                href=\"https://ino.heroarena.app/\"\r\n                target=\"_blank\"\r\n              ></a>\r\n            </div>\r\n          </div> */}\r\n        </div>\r\n      </Modal>\r\n    </div>\r\n  );\r\n}\r\n"],"sourceRoot":""}